////////////////////////////////////////////////////////
. What information is held for an Ethereum account ?
An Ethereum account has the following 4 fields:
- nonce : A scalar value equal to the number of transactions sent from this address or, in
    the case of accounts with associated code, the number of contract-creations made by
    this account. Note: used to prevent replay attacks

- balance: A scalar value equal to the number of Wei owned by this address

- storageRoot: A 256-bit hash of the root node of a Merkle Patricia tree that encodes
    the storage contents of the account (a mapping between 256-bit integer values),
    encoded into the trie as a mapping from the Keccak 256-bit hash of the 256-bit
    integer keys to the RLP-encoded 256-bit integer values.

- codeHash: The hash of the EVM code of this accountâ€”this is the code that gets
    executed should this address receive a message call; it is immutable and thus, unlike
    all other fields, cannot be changed after construction.
////////////////////////////////////////////////////////

////////////////////////////////////////////////////////
. Where is the full Ethereum state held ?
The full Ethereum state is held in the "World State", which is a mapping
between addresses and account states. This state is *not* stored on the blockchain
////////////////////////////////////////////////////////

////////////////////////////////////////////////////////
. What is a replay attack ? which 2 pieces of information can prevent it ?
A replay attack in an attack where the attacked would use the signature of a past
transaction to reuse it and thus replay the action that first occured
To prevent this,  the *chainId* & *nonce* have been implemented
ChainId makes sure the tx is being played on the correct chain (to avoid vulnerabilities due to forks)
Nonce is simply an increment corresponding to the number of tx of the account (so we cant send a tx with the same nonce twice)
////////////////////////////////////////////////////////

////////////////////////////////////////////////////////
. What checks are made on transactions for view functions ?
opcode STATICCALL is used when view functions are called with EVM target >= Byzantium
opcode DELEGATECALL is used for library, because there is no combined DELEGATECALL and STATICCALL.
This means library view functions do not have run-time checks that prevent state modifications

The function visibility is checked
If the function is called from a state-changing transaction,
it will be executed by every verifying node (and thus costing gas if wrapped)
If called directly (not wrapped), then the read operations consumes no gas
No network verification done 
////////////////////////////////////////////////////////

